// This file was automatically generated.
// DO NOT EDIT THIS. It will get overwritten if you rebuild {{mod_name}}!
// (btw, please keep this in sync with extern definitions in riri-mod-tools-rt! ^^;)

using System.Drawing;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace {{ffi_namespace}} 
{
    internal static unsafe partial class Utilities 
    {
		const string __DllName = "{{dll_name}}";

		// Sigscan Resolvers

		[DllImport(__DllName, EntryPoint = "get_address", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
		internal static extern nuint get_address(nuint offset);

		[DllImport(__DllName, EntryPoint = "get_address_may_thunk", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
		internal static extern nuint get_address_may_thunk(nuint offset);

		[DllImport(__DllName, EntryPoint = "get_indirect_address_short", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
		internal static extern nuint get_indirect_address_short(nuint offset);

		[DllImport(__DllName, EntryPoint = "get_indirect_address_short2", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
		internal static extern nuint get_indirect_address_short2(nuint offset);

		[DllImport(__DllName, EntryPoint = "get_indirect_address_long", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
		internal static extern nuint get_indirect_address_long(nuint offset);

		[DllImport(__DllName, EntryPoint = "get_indirect_address_long4", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
		internal static extern nuint get_indirect_address_long4(nuint offset);

		[DllImport(__DllName, EntryPoint = "set_current_process", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
		internal static extern void set_current_process();

		// Logger
		[DllImport(__DllName, EntryPoint = "set_reloaded_logger", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
		internal static extern nuint set_reloaded_logger(delegate* unmanaged[Stdcall]<nint, nint, int, int, void> offset);

		[DllImport(__DllName, EntryPoint = "set_reloaded_logger_newline", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
		internal static extern nuint set_reloaded_logger_newline(delegate* unmanaged[Stdcall]<nint, nint, int, int, void> offset);

		[DllImport(__DllName, EntryPoint = "set_logger_color", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
		internal static extern bool set_logger_color(nint colorName);

		// Executable hash
		[DllImport(__DllName, EntryPoint = "get_executable_hash", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
		internal static extern ulong get_executable_hash();
		
		// Vtable
		[DllImport(__DllName, EntryPoint = "get_vtable_rtti", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
		internal static extern nuint get_vtable_rtti(nuint name, uint offset);

		// Mod Loader actions (temporary)
		[DllImport(__DllName, EntryPoint = "set_get_directory_for_mod", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
		internal static extern nuint set_get_directory_for_mod(delegate* unmanaged[Stdcall]<nint> offset);

		[DllImport(__DllName, EntryPoint = "set_free_csharp_string", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
		internal static extern nuint set_free_csharp_string(delegate* unmanaged[Stdcall]<nint, void> offset);

		// Stack Trace builder
		[DllImport(__DllName, EntryPoint = "set_get_stack_trace", CallingConvention = CallingConvention.StdCall, ExactSpelling = true)]
		internal static extern void set_get_stack_trace(delegate* unmanaged[Stdcall]<nint> offset);
    }
}

namespace {{mod_id}} 
{
    public unsafe partial class Mod
    {
		[UnmanagedCallersOnly(CallConvs = [ typeof(CallConvStdcall) ])]
		public static unsafe void ReloadedLoggerWrite(nint p, nint len, int color, int level) 
		{
		    _logger!.WriteAsync($"[{{logger_prefix}}] {Marshal.PtrToStringUTF8(p, (int)len)}", Color.FromArgb(color));
		}

		[UnmanagedCallersOnly(CallConvs = [ typeof(CallConvStdcall) ])]
		public static unsafe void ReloadedLoggerWriteLine(nint p, nint len, int color, int level)
		{
		    _logger!.WriteLineAsync($"[{{logger_prefix}}] {Marshal.PtrToStringUTF8(p, (int)len)}", Color.FromArgb(color));
		}

		public void RegisterLogger() 
		{
		    {{utility_namespace}}.set_reloaded_logger(&ReloadedLoggerWrite);
		    {{utility_namespace}}.set_reloaded_logger_newline(&ReloadedLoggerWriteLine);
			var LoggerColorString = Marshal.StringToHGlobalAnsi("{{logger_color}}");
			if (!{{utility_namespace}}.set_logger_color(LoggerColorString)) {
				throw new Exception("{{logger_color}} is not a valid color name or hex code!");
			}
			Marshal.FreeHGlobal(LoggerColorString);
		}

		public void RegisterModLoaderAPI()
		{
			{{utility_namespace}}.set_get_directory_for_mod(&GetDirectoryForMod);
			{{utility_namespace}}.set_free_csharp_string(&FreeCSharpString);
		}

		[UnmanagedCallersOnly(CallConvs = [ typeof(CallConvStdcall) ])]
		public static unsafe nint GetDirectoryForMod()
		{
			var ModDirectory = _modLoader!.GetDirectoryForModId(_modConfig!.ModId);
			return Marshal.StringToHGlobalUni(ModDirectory);
		}

		[UnmanagedCallersOnly(CallConvs = [ typeof(CallConvStdcall) ])]
		public static unsafe void FreeCSharpString(nint p)
		{
			Marshal.FreeHGlobal(p);
		}
    }
}