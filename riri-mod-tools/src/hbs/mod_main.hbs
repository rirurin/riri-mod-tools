// This file was automatically generated.
// DO NOT EDIT THIS. It will get overwritten if you rebuild {{mod_name}}!
#nullable enable
using {{mod_id}}.Configuration;
using {{mod_id}}.Template;
using Reloaded.Hooks.ReloadedII.Interfaces;
using Reloaded.Memory;
using Reloaded.Memory.SigScan.ReloadedII.Interfaces;
using Reloaded.Mod.Interfaces;
{{#if uses_shared_scans}}
using SharedScans.Interfaces;
{{/if}}
using System.Drawing;
namespace {{mod_id}}
{
    {{#if exports_interfaces}}
    public partial class Mod : ModBase, IExports
    {{else}}
    public partial class Mod : ModBase
    {{/if}}
    {	
	private static IModLoader? _modLoader;
        private static IReloadedHooks? _hooks;
        private static ILogger? _logger;
        private static IMod? _owner;
        private Config _configuration;
        private readonly IModConfig _modConfig;
	{{#if uses_shared_scans}}
	private static readonly ISharedScans? _sharedScans;
	{{/if}}
	private readonly IStartupScanner _startupScanner;

	public void SigScan(string pattern, string name, Action<nuint> hookerCb)
	{
	    _startupScanner.AddMainModuleScan(pattern, result => 
	    {
	        if (!result.Found)
                {
                    _logger!.WriteLineAsync($"Couldn't find location for {name}, stuff will break :(", Color.Red);
                    return;
                }
                hookerCb((nuint)result.Offset);
	    });
	}

	private IControllerType GetDependency<IControllerType>(string modName) where IControllerType : class
        {
            var controller = _modLoader!.GetController<IControllerType>();
            if (controller == null || !controller.TryGetTarget(out var target))
                throw new Exception($"{{mod_name}}: Could not get controller for \"{modName}\". This depedency is likely missing.");
            return target;
        }

	public Mod(ModContext context)
	{
	    _modLoader = context.ModLoader;
            _hooks = context.Hooks;
            _logger = context.Logger;
            _owner = context.Owner;
            _configuration = context.Configuration;
            _modConfig = context.ModConfig;

	    // Register mod interfaces
	    if (_hooks == null) throw new Exception("{{mod_name}}: Could not get controller for Reloaded hooks");
	    _startupScanner = GetDependency<IStartupScanner>("Reloaded Startup Scanner");
	    {{#if uses_shared_scans}}
	    _sharedScans = GetDependency<ISharedScans>("Shared Scans");
	    {{/if}}
	    {{utility_namespace}}.set_current_process();
	    RegisterLogger();
	    // Register hooks
	    {{#each register_hook_fn}}
	    {{this}}();
	    {{/each}}
	}

	public override void ConfigurationUpdated(Config configuration)
        {
            _configuration = configuration;
            _logger!.WriteLine($"{{mod_name}}: Config updated, applying...");
        }
#pragma warning disable CS8618
        public Mod() { }
#pragma warning restore CS8618
    }
}
